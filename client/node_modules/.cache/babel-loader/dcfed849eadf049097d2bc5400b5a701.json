{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\asmar\\\\code\\\\2021\\\\book-search\\\\client\\\\src\\\\components\\\\Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport GBAPI from '../utils/GBAPI';\nimport Book from './Book';\nimport { BookContext } from './BookContext';\nimport { Typography } from '@material-ui/core';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\n\nconst Search = () => {\n  _s();\n\n  let setAuthor = \"\";\n  const [bookSearch, setBookSearch] = useState(\"\");\n  const [books, setBooks] = useContext(BookContext);\n\n  const manageInput = e => {\n    setBookSearch(e.target.value);\n  };\n\n  const googleBooksSearch = () => {\n    GBAPI.titleSearch(bookSearch).then(results => {\n      setBooks(results.items);\n    });\n  };\n\n  if (books = \"\" || books.volumeInfo.author[0]) {\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Search by Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"Title\",\n        onChange: manageInput,\n        value: bookSearch.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: googleBooksSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: books.map(book => /*#__PURE__*/_jsxDEV(Book, {\n          title: book.volumeInfo.title,\n          author: book.volumeInfo.author[0],\n          description: book.volumeInfo.description,\n          image: book.volumeInfo.imageLinks.thumbnail,\n          link: book.volumeInfo.infoLink,\n          id: book.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Search by Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"Title\",\n        onChange: manageInput,\n        value: bookSearch.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: googleBooksSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: books.map(book => /*#__PURE__*/_jsxDEV(Book, {\n          title: book.volumeInfo.title,\n          description: book.volumeInfo.description,\n          image: book.volumeInfo.imageLinks.thumbnail,\n          link: book.volumeInfo.infoLink,\n          id: book.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(Search, \"J8sB9eFNFdkqwVSaC/XP/QoFKx8=\");\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/Users/asmar/code/2021/book-search/client/src/components/Search.js"],"names":["React","useState","useContext","GBAPI","Book","BookContext","Typography","Input","Button","Search","setAuthor","bookSearch","setBookSearch","books","setBooks","manageInput","e","target","value","googleBooksSearch","titleSearch","then","results","items","volumeInfo","author","title","map","book","description","imageLinks","thumbnail","infoLink","id"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\r\nimport GBAPI from '../utils/GBAPI';\r\nimport Book from './Book';\r\nimport { BookContext } from './BookContext'\r\n\r\nimport { Typography } from '@material-ui/core';\r\nimport Input from '@material-ui/core/Input';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst Search = () => {\r\n\r\n    let setAuthor = \"\";\r\n\r\n    const [bookSearch, setBookSearch] = useState(\"\");\r\n    const [books, setBooks] = useContext(BookContext)\r\n\r\n    const manageInput = e => {\r\n        setBookSearch(e.target.value)\r\n    }\r\n\r\n    const googleBooksSearch = () => {\r\n        GBAPI.titleSearch(bookSearch)\r\n            .then(results => {\r\n                setBooks(results.items)\r\n            })\r\n    }\r\n\r\n    if (books =\"\" || books.volumeInfo.author[0]) {\r\n        return (\r\n            <Typography>\r\n                <p>Search by Title</p>\r\n                <Input placeholder=\"Title\" onChange={manageInput} value={bookSearch.title} />\r\n                <Button onClick={googleBooksSearch}>Search</Button>\r\n                <div>\r\n                    {books.map(book => (\r\n                        <Book title={book.volumeInfo.title} author={book.volumeInfo.author[0]} description={book.volumeInfo.description} image={book.volumeInfo.imageLinks.thumbnail} link={book.volumeInfo.infoLink} id={book.id} />\r\n                    ))}\r\n                </div>\r\n\r\n            </Typography>\r\n        )\r\n    } else {\r\n        return (\r\n            <Typography>\r\n                <p>Search by Title</p>\r\n                <Input placeholder=\"Title\" onChange={manageInput} value={bookSearch.title} />\r\n                <Button onClick={googleBooksSearch}>Search</Button>\r\n                <div>\r\n                    {books.map(book => (\r\n                        <Book title={book.volumeInfo.title} description={book.volumeInfo.description} image={book.volumeInfo.imageLinks.thumbnail} link={book.volumeInfo.infoLink} id={book.id} />\r\n                    ))}\r\n                </div>\r\n            </Typography>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search"]},"metadata":{},"sourceType":"module"}