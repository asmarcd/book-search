{"version":3,"sources":["utils/GBAPI.js","components/PageContext.js","utils/API.js","components/BookContext.js","components/Book.js","components/Search.js","components/Saved.js","components/PageBody.js","components/Header.js","components/Footer.js","components/Nav.js","App.js","index.js"],"names":["GBAPI","titleSearch","titleInput","fetch","process","then","response","json","module","exports","PageContext","createContext","PageProvider","props","useState","page","setPage","Provider","value","children","API","axios","create","baseURL","apis","getAllBooks","get","saveBook","newBook","post","deleteBook","id","delete","BookContext","BookProvider","books","setBooks","useStyles","makeStyles","root","minWidth","title","fontSize","pos","marginBottom","media","width","margin","body","buttons","alignItems","Book","author","description","image","link","classes","useContext","Card","className","variant","CardContent","Typography","component","color","Grid","container","item","CardMedia","alt","CardActions","Button","size","href","IconButton","onClick","e","forEach","book","target","volumeInfo","authors","imageLinks","thumbnail","infoLink","result","data","_id","Search","bookSearch","setBookSearch","Input","placeholder","onChange","console","log","results","items","map","Saved","library","setLibrary","useEffect","bookList","PageBody","Header","Footer","Nav","updatePage","AppBar","Toolbar","justify","spacing","ButtonGroup","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.405f2f86.chunk.js","sourcesContent":["const GBAPI = {\r\n    titleSearch: function (titleInput) {\r\n        return fetch(`https://www.googleapis.com/books/v1/volumes?q=${titleInput}+intitle&key=${process.env.REACT_APP_GOOGLE_API_KEY}`)\r\n            .then(response => response.json())\r\n    }\r\n}\r\n\r\nmodule.exports = GBAPI;","import React, {useState, createContext} from 'react';\r\n\r\nexport const PageContext = createContext();\r\n\r\nexport const PageProvider = props => {\r\n    const [page, setPage] = useState(\"search\");\r\n\r\n    return (\r\n        <PageContext.Provider value={[page, setPage]}>\r\n            {props.children}\r\n        </PageContext.Provider>\r\n    )\r\n}","import axios from 'axios';\r\n\r\nconst API = axios.create({\r\n    baseURL: `/api`\r\n});\r\n\r\nexport const getAllBooks = () => API.get('/books');\r\nexport const saveBook = newBook => API.post('/book', newBook);\r\nexport const deleteBook = id => API.delete(`/book/${id}`);\r\n\r\nconst apis = {\r\n    getAllBooks,\r\n    saveBook,\r\n    deleteBook\r\n}\r\n\r\nexport default apis","import React, {useState, createContext} from 'react';\r\n\r\nexport const BookContext = createContext();\r\n\r\nexport const BookProvider = props => {\r\n    const [books, setBooks] = useState([])\r\n\r\n    return (\r\n        <BookContext.Provider value={[books, setBooks]}>\r\n            {props.children}\r\n        </BookContext.Provider>\r\n    )\r\n}","import React, { useContext } from 'react';\r\nimport API from '../utils/API';\r\nimport { BookContext } from './BookContext';\r\nimport { PageContext } from './PageContext';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    media: {\r\n        width: \"20vw\",\r\n        margin: \"20px\"\r\n    },\r\n    body: {\r\n        width: \"60vw\"\r\n    },\r\n    buttons: {\r\n        alignItems: \"center\"\r\n    }\r\n});\r\n\r\nconst Book = ({ title, author, description, image, link, id }) => {\r\n    const classes = useStyles();\r\n\r\n    const [books, setBooks] = useContext(BookContext);\r\n    const [page, setPage] = useContext(PageContext)\r\n\r\n    const addBook = e => {\r\n        books.forEach(book => {\r\n            if (book.id === e.target.value) {\r\n                API.saveBook({\r\n                    id: book.id,\r\n                    title: book.volumeInfo.title,\r\n                    author: book.volumeInfo.authors[0],\r\n                    description: book.volumeInfo.description,\r\n                    image: book.volumeInfo.imageLinks.thumbnail,\r\n                    link: book.infoLink\r\n                })\r\n            }\r\n        })\r\n    };\r\n\r\n    const removeBook = e => {\r\n        API.getAllBooks().then(result => {\r\n            let library = result.data.data;\r\n            library.forEach(book => {\r\n                if (book._id === e.target.value) {\r\n                    API.deleteBook(book._id)\r\n                }\r\n            })\r\n        })\r\n    };\r\n\r\n    if (page === \"search\") {\r\n        return (\r\n            <Card className={classes.root} variant=\"outlined\">\r\n                <CardContent>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        {title}\r\n                    </Typography>\r\n                    <Typography className={classes.pos} color=\"textSecondary\">\r\n                        {author}\r\n                    </Typography>\r\n                    <Grid container>\r\n                        <Grid item>\r\n                            <Typography variant=\"body2\" component=\"p\" className={classes.body}>\r\n                                {description}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <CardMedia className={classes.media}\r\n                                component=\"img\"\r\n                                alt=\"Book Cover\"\r\n                                image={image}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n                <CardActions className={classes.buttons}>\r\n                    <Button size=\"small\" href={link}>Learn More on Google Books</Button>\r\n                    <IconButton onClick={addBook} value={id}>\r\n                        <SaveIcon />\r\n                    </IconButton>\r\n                </CardActions>\r\n            </Card >\r\n        );\r\n    };\r\n\r\n    if (page === \"saved\") {\r\n        return (\r\n            <Card className={classes.root} variant=\"outlined\">\r\n                <CardContent>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        {title}\r\n                    </Typography>\r\n                    <Typography className={classes.pos} color=\"textSecondary\">\r\n                        {author}\r\n                    </Typography>\r\n                    <Grid container>\r\n                        <Grid item>\r\n                            <Typography variant=\"body2\" component=\"p\" className={classes.body}>\r\n                                {description}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <CardMedia className={classes.media}\r\n                                component=\"img\"\r\n                                alt=\"Book Cover\"\r\n                                image={image}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n                <CardActions className={classes.buttons}>\r\n                    <Button size=\"small\" href={link}>Learn More on Google Books</Button>\r\n                    <IconButton onClick={removeBook} value={id}>\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </CardActions>\r\n            </Card >\r\n        )\r\n    }\r\n};\r\n\r\nexport default Book;","import React, { useState, useContext } from 'react';\r\nimport GBAPI from '../utils/GBAPI';\r\nimport Book from './Book';\r\nimport { BookContext } from './BookContext'\r\n\r\nimport { Typography } from '@material-ui/core';\r\nimport Input from '@material-ui/core/Input';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst Search = () => {\r\n\r\n    const [bookSearch, setBookSearch] = useState(\"\");\r\n    const [books, setBooks] = useContext(BookContext)\r\n\r\n    const manageInput = e => {\r\n        setBookSearch(e.target.value)\r\n    }\r\n\r\n    const googleBooksSearch = () => {\r\n        console.log(bookSearch)\r\n        GBAPI.titleSearch(bookSearch)\r\n            .then(results => {\r\n                setBooks(results.items)\r\n            })\r\n    }\r\n\r\n    return (\r\n        // TODO: Typography below needs to be updated now that I get how it works.\r\n        // TODO: the google books api doesn't always have all the below info. if it's missing somethnig, like the book doesn't have an author, or you get no results, it crashes the app when you submit the search.\r\n        <Typography>\r\n            <p>Search by Title</p>\r\n            <Input placeholder=\"Title\" onChange={manageInput} value={bookSearch.title} />\r\n            <Button onClick={googleBooksSearch}>Search</Button>\r\n            <div>\r\n                {books.map(book => (\r\n                    <Book title={book.volumeInfo.title} author={book.volumeInfo.authors[0]} description={book.volumeInfo.description} image={book.volumeInfo.imageLinks.thumbnail} link={book.volumeInfo.infoLink} id={book.id} />\r\n                ))}\r\n            </div>\r\n\r\n        </Typography>\r\n    )\r\n}\r\n\r\nexport default Search","import React, { useState, useEffect } from 'react';\r\nimport API from '../utils/API';\r\nimport Book from \"./Book\"\r\n\r\n\r\nconst Saved = () => {\r\n\r\n    const [library, setLibrary] = useState([]);\r\n\r\n    useEffect(() => {\r\n        console.log(\"useeffect\")\r\n        API.getAllBooks().then(bookList => {\r\n            console.log(bookList)\r\n            setLibrary(bookList.data.data)\r\n            console.log(library)\r\n        })\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {library.map(book => (\r\n                <Book title={book.title} author={book.author} description={book.description} image={book.image} link={book.link} id={book._id}/>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Saved","import React, { useContext } from 'react';\r\nimport { PageContext } from './PageContext';\r\nimport Search from './Search';\r\nimport Saved from './Saved';\r\n\r\n\r\nconst PageBody = () => {\r\n    const [page, setPage] = useContext(PageContext);\r\n\r\n    if(page===\"search\"){\r\n        return (\r\n            <Search />\r\n        );\r\n    } else if (page===\"saved\"){\r\n        return (\r\n            <Saved />\r\n        );\r\n    }\r\n};\r\n\r\nexport default PageBody;","\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <h3>Search for and Save Books you're Interested in</h3>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;\r\n","\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p>Made by Chris Asmar with ReactJS and MaterialUI</p>\r\n        </footer>\r\n    )\r\n};\r\n\r\nexport default Footer;","import React, { useContext } from 'react';\r\nimport { PageContext } from './PageContext'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport { ButtonGroup, Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nconst Nav = props => {\r\n\r\n    const [page, setPage] = useContext(PageContext);\r\n\r\n    const updatePage = e => {\r\n        setPage(e.target.value)\r\n    };\r\n\r\n    return (\r\n        <AppBar>\r\n            <Toolbar>\r\n                <Grid\r\n                    justify=\"space-between\"\r\n                    container\r\n                    spacing={24}\r\n                >\r\n                    <Grid item>\r\n                        <Typography variant=\"h6\">\r\n                            Google Books Search\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <ButtonGroup variant=\"contained\">\r\n                            <Button value=\"search\" onClick={updatePage}>\r\n                                Search\r\n                            </Button>\r\n                            <Button value=\"saved\" onClick={updatePage}>\r\n                                Saved Books\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Grid>\r\n                </Grid>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n};\r\n\r\nexport default Nav;","import { Typography } from \"@material-ui/core\";\nimport PageBody from \"./components/PageBody\"\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Nav from './components/Nav';\nimport './App.css';\nimport { PageProvider } from './components/PageContext';\nimport { BookProvider } from './components/BookContext'\n\nfunction App() {\n\n  return (\n    <PageProvider>\n      <BookProvider>\n        <div className=\"App\">\n          <Typography >\n            <Nav />\n            <Header />\n            <PageBody />\n            <Footer />\n          </Typography>\n        </div>\n      </BookProvider>\n    </PageProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}